<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        <!-- mapper是根标签，namespace属性：在Mybatis全局范围内找到一个具体的Mapper配置 -->
        <!-- 引入接口后，为了方便通过接口全类名来找到Mapper配置文件，所以通常将namespace属性设置为接口全类名 -->
<mapper namespace="report.dao.FunctionDao">
    
    <resultMap id="selectFunction" type="report.models.function.Function">
        <result column="fid" property="fid" />
        <result column="f_name" property="fname" />
        <result column="f_url" property="furl" />
    </resultMap>
    <!-- 编写具体的SQL语句，使用id属性唯一的标记一条SQL语句 -->
    <!-- resultType属性：指定封装查询结果的Java实体类的全类名 -->
    <select id="findFunction" resultMap="selectFunction">
        <!-- Mybatis负责把SQL语句中的#{}部分替换成“?”占位符，在#{}内部还是要声明一个见名知意的名称 -->
        select fid,f_name,f_url from function_table where fid = #{fid}
    </select>

    <select id="findAllFunction" resultMap="selectFunction">
        <!-- Mybatis负责把SQL语句中的#{}部分替换成“?”占位符，在#{}内部还是要声明一个见名知意的名称 -->
        select fid,f_name,f_url from function_table
    </select>

    <insert id="insertFuncion">
        insert into function_table(f_name,f_url) value(#{fname},#{furl})
    </insert>

    <delete id="deleteFunction">
        delete from function_table where fid = #{fid}
    </delete>

    <update id="updateFunction">
        update function_table
        set f_name = #{fname}, f_url= #{furl}
        where fid = #{fid}
    </update>


</mapper>
<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        <!-- mapper是根标签，namespace属性：在Mybatis全局范围内找到一个具体的Mapper配置 -->
        <!-- 引入接口后，为了方便通过接口全类名来找到Mapper配置文件，所以通常将namespace属性设置为接口全类名 -->
<mapper namespace="report.dao.UserDao">
    
    <resultMap id="selectUser" type="report.models.user.User">
        <result column="uid" property="uid" />
        <result column="login_name" property="loginName" />
        <result column="user_name" property="userName" />
        <result column="pwd" property="pwd" />
        <result column="user_role_id" property="userRoleId" />
    </resultMap>
    <!-- 编写具体的SQL语句，使用id属性唯一的标记一条SQL语句 -->
    <!-- resultType属性：指定封装查询结果的Java实体类的全类名 -->
    <select id="findUserByLoginNameAndPassword" resultMap="selectUser">
        <!-- Mybatis负责把SQL语句中的#{}部分替换成“?”占位符，在#{}内部还是要声明一个见名知意的名称 -->
        select uid,login_name,user_name,user_role_id from user_table where login_name=#{loginName} and pwd=#{pwd}
    </select>

    <select id="findUserByloginName" resultMap="selectUser">
        <!-- Mybatis负责把SQL语句中的#{}部分替换成“?”占位符，在#{}内部还是要声明一个见名知意的名称 -->
        select uid,login_name,user_name,pwd,user_role_id from user_table where login_name=#{loginName}
    </select>

    <insert id="insertUser">
        insert into user_table(login_name,user_name,pwd,user_role_id) value(#{loginName},#{userName},#{pwd},#{userRoleId})
    </insert>

    <delete id="deleteUserByloginName">
        delete from user_table where login_name = #{loginName}
    </delete>

    <update id="updateUser">
        update user_table
        set login_name = #{loginName}, user_name= #{userName}, pwd = #{pwd},user_role_id = #{userRoleId}
        where uid = #{uid}
    </update>


</mapper>